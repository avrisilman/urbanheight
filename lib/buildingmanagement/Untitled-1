import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:exif/exif.dart';
import 'package:flutter/material.dart';
import 'package:urbanheight/service/api.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:image_picker/image_picker.dart';
import 'package:fluttertoast/fluttertoast.dart';

class MyHomePage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return _MyHomePageState();
  }
}

class _MyHomePageState extends State<MyHomePage> {
  SharedPreferences prefs;
  File _imageFile;
  // String base64Image = '';
  // Uint8List bytes;
  String _base64;

  TextEditingController ketController = new TextEditingController();

  void save() async {
     Fluttertoast.showToast(
            msg: _imageFile.lengthSync().toString(),
            toastLength: Toast.LENGTH_SHORT,
            gravity: ToastGravity.CENTER,
            timeInSecForIos: 1,
            backgroundColor: Colors.red,
            textColor: Colors.white,
            fontSize: 16.0);
    prefs = await SharedPreferences.getInstance();
    var url = Api.serviceApi + '/api/service/1';
    final response = await http.post(url, headers: {
      'authorization': prefs.getString("token")
    }, body: {
      "information": ketController.text,
      "images": _base64,
    });
    final data = jsonDecode(response.body);
    final message = data['message'];

    setState(() {
      if (message == 'success') {
        Fluttertoast.showToast(
            msg: "Sukses",
            toastLength: Toast.LENGTH_SHORT,
            gravity: ToastGravity.CENTER,
            timeInSecForIos: 1,
            backgroundColor: Colors.red,
            textColor: Colors.white,
            fontSize: 16.0);
      } else {
        Fluttertoast.showToast(
            msg: "Gagal Terkirim",
            toastLength: Toast.LENGTH_SHORT,
            gravity: ToastGravity.CENTER,
            timeInSecForIos: 1,
            backgroundColor: Colors.red,
            textColor: Colors.white,
            fontSize: 16.0);
      }
    });
  }

  void _getImage(BuildContext context, ImageSource source) {
    ImagePicker.pickImage(
      source: source,maxHeight: 450 , maxWidth: 450
    ).then((File image) async {
      image = await rotateAndCompressAndSaveImage(image);
      setState(() {
        _imageFile = image;
         _base64 = base64.encode(_imageFile.readAsBytesSync());
         // print("FILE SIZE BEFORE: " + _imageFile.lengthSync().toString());
        // base64Image = base64Encode(_imageFile.readAsBytesSync());
        // bytes = base64.decode(base64Image);
      });
      Navigator.pop(context);
    });
  }

  void _openImagePicker(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: 150.0,
          padding: EdgeInsets.all(10.0),
          child: Column(children: [
            Text(
              'Pick an Image',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            SizedBox(
              height: 10.0,
            ),
            FlatButton(
              textColor: Theme.of(context).primaryColor,
              child: Text('Use Camera'),
              onPressed: () {
                _getImage(context, ImageSource.camera);
              },
            ),
            FlatButton(
              textColor: Theme.of(context).primaryColor,
              child: Text('Use Gallery'),
              onPressed: () {
                _getImage(context, ImageSource.gallery);
              },
            )
          ]),
        );
      },
    );
  }

  Widget _buildImagePreview() {
    if (_imageFile == null) {
      return Container(
        height: 200.0,
        color: Colors.grey,
      );
    }

    return Image.memory(
      base64.decode(_base64),
      fit: BoxFit.cover,
      height: 200.0,
      width: MediaQuery.of(context).size.width,
      alignment: Alignment.topCenter,
    );
  }

  @override
  Widget build(BuildContext context) {
      TextStyle style = TextStyle(
      fontFamily: 'Montserrat',
      fontSize: 14.0,
      color: Colors.green,
    );
    return Scaffold(
      appBar: AppBar(
        title: Text('Camera Bug'),
      ),
      body: Column(
        children: <Widget>[
          _buildImagePreview(),
          SizedBox(
            height: 20.0,
          ),
          RaisedButton(
            child: Text('Select image'),
            onPressed: () {
              _openImagePicker(context);
            },
          ),
          Padding(
                padding: EdgeInsets.all(8.0),
                child: TextField(
                  controller: ketController,
                  obscureText: false,
                  style: style,
                  decoration: InputDecoration(
                      prefixIcon: Icon(
                        Icons.assignment,
                        color: Colors.blue,
                      ),
                      contentPadding:
                          EdgeInsets.fromLTRB(15.0, 10.0, 15.0, 10.0),
                      hintText: "Keterangan",
                      border: OutlineInputBorder(
                          borderSide: new BorderSide(color: Colors.green),
                          borderRadius: BorderRadius.circular(32.0))),
                )),
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: RaisedButton(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(24),
                    ),
                    onPressed: () {
                      save();
                    },
                    color: Colors.blue,
                    child: Text('SAVE',
                        style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 16.0)),
                  ),
                ),
        ],
      ),
    );
  }

  Future<File> rotateAndCompressAndSaveImage(File image) async {
    int rotate = 0;
    List<int> imageBytes = await image.readAsBytes();
    Map<String, IfdTag> exifData = await readExifFromBytes(imageBytes);

    if (exifData != null &&
        exifData.isNotEmpty &&
        exifData.containsKey("Image Orientation")) {
      IfdTag orientation = exifData["Image Orientation"];
      int orientationValue = orientation.values[0];

      if (orientationValue == 3) {
        rotate = 180;
      }

      if (orientationValue == 6) {
        rotate = -90;
      }

      if (orientationValue == 8) {
        rotate = 90;
      }
    }

    List<int> result = await FlutterImageCompress.compressWithList(imageBytes,
        quality: 100, rotate: rotate);

    await image.writeAsBytes(result);

    return image;
  }
}
